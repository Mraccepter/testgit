package concurrency;

class Meal{
	private final int orderNum;
	public Meal(int num)
	{
		orderNum = num;
	}
	public String toString()
	{
		return "Meal " + orderNum;
	}
}
class waitPerson implements Runnable{
	private Restaurant restaurant;
	public waitPerson(Restaurant r) {
		restaurant = r;
	}
	public void run()
	{
		try{
			while(!Thread.interrupted())
			{
				synchronized (this) {
				while(restaurant.meal == null)
					wait();
				}
			}
			System.out.println("waitperson got " + restaurant.meal);
			synchronized (restaurant.chef) {
				restaurant.meal = null;
				restaurant.chef.notifyAll();
			}
		}catch(InterruptedException e)
		{
			System.out.println("waitperson interrupted");
		}
	}
}
class Chef implements Runnable
{
	private Restaurant restaurant;
	private int count = 0;
	public Chef(Restaurant r) {
		restaurant = r;
	}
}
public class Restaurant {

}
